version: 2.1

orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2

workflows:
  sample:  # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run. 
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows 
    jobs:
      - build-and-test


jobs:
  build-and-test:  # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.9 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.8
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout

      - python/install-packages:
          pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: |
            df
            free
            cat /proc/cpuinfo
            sudo apt update
            sudo apt-get install -y graphviz python3-sklearn python3-pandas python3-sqlalchemy python3-matplotlib jupyter-notebook python3-ipython python3-scipy python3-numpy python3-dill python3-pydot
            pip install numpy scipy pandas sklearn matplotlib pydot dill sqlalchemy jupyter xgboost ipython lightgbm
            mkdir -p logs
            rm -rf ~/.matplotlib
            rm -rf ~/.cache/matplotlib
            rm -rf ~/.matplotlib/fontList.cache  
            fc-cache 
            export PYTHONPATH=$PYTHONPATH:.
            python ./tests/bugs/issue_36/display_version_info.py
            python tests/demos/demo1.py
            python tests/func/test_ozone.py
            python tests/func/test_air_passengers.py
            make PYTHON=python -f tests/Makefile build-test
            python scripts/upload_to_chunk.io.py
            pip install .
            jupyter nbconvert --to notebook --ExecutePreprocessor.timeout=None --execute docs/sample_code.ipynb
            jupyter nbconvert --to notebook --ExecutePreprocessor.timeout=None --execute docs/PyAF_Introduction.ipynb
            jupyter nbconvert --to notebook --ExecutePreprocessor.timeout=None --execute docs/PyAF_Exogenous.ipynb


